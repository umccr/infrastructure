{
  "Comment": "State Machine that asynchronously runs UMCCR pipoline commands",
  "StartAt": "Notify new runfolder ready",
  "States": {



    "Notify Failure": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Pipeline failure..."
      },
      "Next": "FailState"
    },
    "FailState": {
      "Type": "Fail"
    },


    "Notify new runfolder ready": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous runfolder check",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Runfolder ready. Starting pipeline..."
      },
      "ResultPath": "$.lambda_result",
      "Retry": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "IntervalSeconds": 5
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "Next": "Notify Failure"
        }
      ]
    },
    "Asynchronous runfolder check": {
      "Type": "Parallel",
      "Next": "Notify runfolder check complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start runfolder check",
          "States": {
            "Start runfolder check": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "runfolder_check",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for runfolder check",
          "States": {
            "Wait for runfolder check": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 65,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify runfolder check complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous samplesheet check",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Runfolder check complete. Starting samplesheet check..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous samplesheet check": {
      "Type": "Parallel",
      "Next": "Notify sample sheet check complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start samplesheet check",
          "States": {
            "Start samplesheet check": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "samplesheet_check",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for samplesheet check",
          "States": {
            "Wait for samplesheet check": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 605,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify sample sheet check complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous bcl2fastq",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "SampleSheet check complete. Starting conversion..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous bcl2fastq": {
      "Type": "Parallel",
      "Next": "Notify bcl2fastq complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start bcl2fastq",
          "States": {
            "Start bcl2fastq": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "bcl2fastq",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for bcl2fastq",
          "States": {
            "Wait for bcl2fastq": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 72005,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify bcl2fastq complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous create checksums for runfolder",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Bcl2fastq conversion complete. Starting runfolder checksums..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous create checksums for runfolder": {
      "Type": "Parallel",
      "Next": "Notify checksums for runfolderr complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start create runfolder checksums",
          "States": {
            "Start create runfolder checksums": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "create_runfolder_checksums",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for create runfolder checksums",
          "States": {
            "Wait for create runfolder checksums": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 36005,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify checksums for runfolderr complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous create checksums for fastqs",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Runfolder checksums complete. Starting fastq checksums..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous create checksums for fastqs": {
      "Type": "Parallel",
      "Next": "Notify checksums for fastqs complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start create fastq checksums",
          "States": {
            "Start create fastq checksums": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "create_fastq_checksums",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for create fastq checksums",
          "States": {
            "Wait for create fastq checksums": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 36005,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify checksums for fastqs complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous sync fastqs to Spartan S3",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Fastq checksums complete. Starting fastq sync to Spartan S3..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous sync fastqs to Spartan S3": {
      "Type": "Parallel",
      "Next": "Notify fastq sync to Spartan S3 complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start fastq sync to Spartan S3",
          "States": {
            "Start fastq sync to Spartan S3": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "sync_fastqs_to_s3_spartan",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for fastq sync to Spartan S3",
          "States": {
            "Wait for fastq sync to Spartan S3": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 36005,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify fastq sync to Spartan S3 complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous sync runfolder to S3",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Fastq sync to Spartan S3 complete. Starting runfolder sync to S3..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous sync runfolder to S3": {
      "Type": "Parallel",
      "Next": "Notify runfolder sync to S3 complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start runfolder sync to S3",
          "States": {
            "Start runfolder sync to S3": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "sync_runfolder_to_s3",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for runfolder sync to S3",
          "States": {
            "Wait for runfolder sync to S3": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 10805,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify runfolder sync to S3 complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous sync fastqs to S3",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Runfolder sync to S3 complete. Starting fastq sync to S3..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous sync fastqs to S3": {
      "Type": "Parallel",
      "Next": "Notify fastq sync to S3 complete",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start fastq sync to S3",
          "States": {
            "Start fastq sync to S3": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "sync_fastqs_to_s3",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for fastq sync to S3",
          "States": {
            "Wait for fastq sync to S3": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 36005,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify fastq sync to S3 complete": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "Next": "Asynchronous create MultiQC reports",
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "Fastq sync to S3 complete. Creating MultiQC reports..."
      },
      "ResultPath": "$.lambda_result"
    },
    "Asynchronous create MultiQC reports": {
      "Type": "Parallel",
      "Next": "Notify pipeline end",
      "OutputPath": "$[1]",
      "Branches": [
        {
          "StartAt": "Start create MultiQC reports",
          "States": {
            "Start create MultiQC reports": {
              "Type": "Task",
              "Resource": "${pipeline_lambda_arn}",
              "Parameters": {
                "script_execution": "create_multiqc_reports",
                "input.$": "$"
              },
              "TimeoutSeconds": 12,
              "End": true,
              "Retry": [
                {
                  "ErrorEquals": [
                    "States.ALL"
                  ],
                  "IntervalSeconds": 3,
                  "MaxAttempts": 2,
                  "BackoffRate": 1.5
                }
              ]
            }
          }
        },
        {
          "StartAt": "Wait for create MultiQC reports",
          "States": {
            "Wait for create MultiQC reports": {
              "Type": "Task",
              "Resource": "${wait_for_async_action_activity_arn}",
              "ResultPath": "$.script_result",
              "TimeoutSeconds": 605,
              "End": true
            }
          }
        }
      ],
      "Catch": [
        {
          "ErrorEquals": [
            "States.ALL"
          ],
          "ResultPath": "$.error_info",
          "Next": "Notify Failure"
        }
      ]
    },
    "Notify pipeline end": {
      "Type": "Task",
      "Resource": "${slack_notify_lambda_arn}",
      "End": true,
      "TimeoutSeconds": 12,
      "Parameters": {
        "topic": "UMCCR pipeline",
        "title.$": "$.runfolder",
        "message": "QC reports created. Pipeline complete!"
      },
      "ResultPath": "$.lambda_result"
    }
  }
}