---
AWSTemplateFormatVersion: "2010-09-09"
Description: "Bootstrap the Terraform S3 Backend"

#
# This CloudFormation stack template initializes all of the resources necessary
# to utilize the Terraform S3 backend, see;
# https://www.terraform.io/language/settings/backends/s3
#
# These resources are meant to reside in what the Terraform documentation refers
# to as an "administrative AWS account". See;
# https://developer.hashicorp.com/terraform/language/settings/backends/s3#multi-account-aws-architecture
#
# Note that should this CloudFormation stack be deleted the S3 bucket and
# DynamoDB table it defines will be retained for safety's sake.
#

# Operational commands:
# aws cloudformation validate-template --template-body file://terraform-bootstrap.yaml

# aws cloudformation deploy \
#   --template-file terraform-bootstrap.yaml \
#   --stack-name terraform-bootstrap \
#   --parameter-overrides S3BucketName=terraform-states-339712978718-ap-southeast-1 \
#   --no-execute-changeset

Parameters:

  #
  # If the `S3BucketName` parameter is left empty then a random name will be
  # generated that uses this CloudFormation stack's name as a prefix.
  #
  S3BucketName:
    Type: String
    Description: >-
      Name for the S3 bucket created to store Terraform state.
    Default: ""

  S3StatePrefix:
    Type: String
    Description: >-
      Prefix within the S3 bucket to store Terraform state.
    Default: "terraform-state"

  DynamoDbTableName:
    Type: String
    Description: >-
      Name for the DynamocDB table created to lock Terraform state.
    Default: "terraform-state-lock"


Rules:

  StatePrefixConstraint:
    Assertions:
      - Assert: !Not [ !Equals [ !Ref S3StatePrefix, "" ] ]
        AssertDescription: >-
          The S3 prefix for state objects may not be blank.

  LockingTableNameConstraint:
    Assertions:
      - Assert: !Not [ !Equals [ !Ref DynamoDbTableName, "" ] ]
        AssertDescription: >-
          The name for the DynamoDB locking table may not be blank.


Conditions:

  HasSpecifiedS3BucketName: !Not [ !Equals [ !Ref S3BucketName, "" ] ]


Resources:

  #
  # Stores the Terraform state. This bucket may be used as the backend for more
  # than one remote state instance.
  #
  Bucket:
    Type: AWS::S3::Bucket
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      BucketName: !If [ HasSpecifiedS3BucketName, !Ref S3BucketName, !Ref "AWS::NoValue" ]
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: ExpireVersions
            Status: Enabled
            NoncurrentVersionExpiration:
              NewerNoncurrentVersions: 3
              NoncurrentDays: 30
            ExpiredObjectDeleteMarker: true
      Tags:
        - Key: "umccr:Stack"
          Value: "management"
        - Key: "umccr:Creator"
          Value: "cloudformation"

  #
  # The backend can use a DynamoDB table for locking to prevent races between
  # different instances of Terraform.
  #
  # The layout of this table is buried in the S3 backend documentation, see;
  # https://developer.hashicorp.com/terraform/language/settings/backends/s3#dynamodb-state-locking
  #
  # TLDR; "The table must have a partition key named LockID with type of String."
  #
  DynamoTable:
    Type: AWS::DynamoDB::Table
    UpdateReplacePolicy: Retain
    DeletionPolicy: Retain
    Properties:
      TableName: !Ref DynamoDbTableName
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: true
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: LockID
          AttributeType: S
      KeySchema:
        - AttributeName: LockID
          KeyType: HASH
      SSESpecification:
        SSEEnabled: true
      Tags:
        - Key: "umccr:Stack"
          Value: "management"
        - Key: "umccr:Creator"
          Value: "cloudformation"


Outputs:

  Bucket:
    Description: Terrafom state S3 bucket
    Value: !Ref Bucket
    Export:
      Name: !Sub "${AWS::StackName}:bucket-name"

  LockTable:
    Description: Terraform state lock table
    Value: !GetAtt DynamoTable.Arn
    Export:
      Name: !Sub "${AWS::StackName}:dynamo-table-arn"
